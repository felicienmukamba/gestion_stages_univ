"""
Django settings for university_internships project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os # Importer le module os pour accéder aux variables d'environnement
from pathlib import Path
# Importez dotenv pour charger les variables d'environnement depuis un fichier .env en local
# Assurez-vous d'installer python-dotenv : pip install python-dotenv
from dotenv import load_dotenv

# Charger les variables d'environnement depuis un fichier .env local (utile en développement)
# Cela ne fait rien en production où les variables sont gérées différemment.
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Paramètres de Sécurité ---

# SECRET_KEY doit être gardé secret ! Utilisez une variable d'environnement en production.
# Générez-en une nouvelle et complexe pour la production.
# En développement, vous pouvez lire depuis un fichier .env ou utiliser une valeur par défaut.
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-+e*al@6zf$u20iia_rmj7b3w(&%gjx735op(4-r9qb-(oc22t)")
# Assurez-vous que la valeur par défaut ici est UNIQUEMENT pour le DÉVELOPPEMENT local.

# DEBUG : Ne JAMAIS mettre à True en production !
DEBUG = os.getenv("DEBUG", "True").lower() == "true" # Lire depuis une variable d'environnement

# ALLOWED_HOSTS : Liste des noms de domaine/IP autorisés pour servir l'application.
# Doit être vide en DEBUG=True, sinon doit contenir les hôtes de production (ex: votre_domaine.com, 192.168.1.10).
# Lisez depuis une variable d'environnement en production.
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",") if not DEBUG else []
# Si DEBUG=True, Django autorise automatiquement 'localhost' et '127.0.0.1'.

# --- Paramètres d'Application ---

INSTALLED_APPS = [
    # Applications par défaut de Django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Vos applications et celles de tiers
    'internships', # Votre application de gestion de stages
    'crispy_forms', # Pour faciliter le rendu des formulaires
    'crispy_bootstrap5', # Le template pack Bootstrap 5 pour crispy_forms
    # 'django.contrib.gis', # Décommentez si vous utilisez des champs géographiques comme PointField
    # 'django_Maps', # Décommentez si vous utilisez django-google-maps
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware", # Protection contre les attaques CSRF
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware", # Supporte les messages flash
    "django.middleware.clickjacking.XFrameOptionsMiddleware", # Protection contre le clickjacking
    # Ajoutez d'autres middlewares ici si nécessaire (ex: WhiteNoise pour les statiques en prod)
]

ROOT_URLCONF = "university_internships.urls" # Le fichier d'URLs principal

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # 'DIRS' : Liste des chemins absolus où Django cherchera des templates en plus des APP_DIRS
        # Utile pour les templates de projet qui ne sont pas spécifiques à une app (ex: templates génériques d'erreurs 404/500)
        "DIRS": [BASE_DIR / 'templates'], # Optionnel: créez un dossier 'templates' à la racine du projet si besoin
        "APP_DIRS": True, # Cherche automatiquement les templates dans les sous-dossiers 'templates' des applications installées
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug", # Utile en DEBUG=True
                "django.template.context_processors.request", # Nécessaire pour certains fonctionnalités (ex: CSRF)
                "django.contrib.auth.context_processors.auth", # Fournit le contexte 'user'
                "django.contrib.messages.context_processors.messages", # Fournit le contexte 'messages'
                # Ajoutez d'autres context processors si nécessaire
            ],
            # Options pour les balises et filtres de templates
            "libraries": {
                'crispy_forms_tags': 'crispy_forms.templatetags.crispy_forms_tags',
                # Ajoutez d'autres librairies de template si nécessaire
            },
        },
    },
]

WSGI_APPLICATION = "university_internships.wsgi.application"


# --- Configuration de la Base de Données ---

DATABASES = {
    "default": {
        # En développement, utilisez SQLite (simple, pas de config externe)
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Exemple de configuration pour PostgreSQL en production (utilisant des variables d'environnement)
# if not DEBUG: # Appliquer cette config seulement en production
#     DATABASES["default"] = {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.getenv("DB_NAME", "university_internships_db"), # Nom de la base de données
#         "USER": os.getenv("DB_USER", "db_user"),             # Utilisateur de la base de données
#         "PASSWORD": os.getenv("DB_PASSWORD", "your_password"),     # Mot de passe de la base de données
#         "HOST": os.getenv("DB_HOST", "localhost"),           # Hôte de la base de données (IP ou nom d'hôte)
#         "PORT": os.getenv("DB_PORT", ""),                    # Port de la base de données (laisser vide pour le défaut)
#     }


# --- Validation du Mot de Passe ---
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]

# --- Internationalisation et Localisation ---
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# LANGUAGE_CODE définit la langue par défaut de l'interface (admin, messages d'erreurs Django, etc.)
# 'fr' pour le français
LANGUAGE_CODE = "fr"

# TIME_ZONE : Fuseau horaire de votre application. Utilisez un nom de fuseau horaire IANA valide.
# Pour Bukavu, RDC, Africa/Lubumbashi est approprié.
TIME_ZONE = "Africa/Lubumbashi"

# USE_I18N : Active le système de traduction de Django. Laissez à True si vous voulez traduire votre application.
USE_I18N = True

# USE_TZ : Active la prise en charge des fuseaux horaires par Django pour les dates/heures stockées.
# Fortement recommandé de laisser à True.
USE_TZ = True


# --- Fichiers Statiques (CSS, JavaScript, Images non téléchargées par l'utilisateur) ---
# https://docs.djangoproject.com/en/5.2/ref/settings/#static-files

# STATIC_URL : URL utilisée pour accéder aux fichiers statiques.
STATIC_URL = "static/"

# STATICFILES_DIRS : (Optionnel) Liste des chemins absolus vers des répertoires contenant des fichiers statiques
# qui ne sont pas spécifiques à une application (ex: fichiers statiques de projet).
# STATICFILES_DIRS = [
#     BASE_DIR / "static",
# ]

# STATIC_ROOT : Le répertoire où `collectstatic` rassemblera tous les fichiers statiques pour la production.
# Doit être un chemin absolu et NE DOIT PAS être un répertoire inclus dans STATICFILES_DIRS ou STATIC_DIRS.
# C'est le répertoire que votre serveur web (Nginx/Apache) servira en production.
STATIC_ROOT = BASE_DIR / "staticfiles" # Créez ce répertoire à la racine du projet

# --- Fichiers Média (Téléchargés par l'utilisateur) ---
# Utile si vous permettez aux utilisateurs de télécharger des fichiers (ex: logos d'entreprise, photos).
# MEDIA_URL : URL utilisée pour accéder aux fichiers médias.
MEDIA_URL = "/media/"

# MEDIA_ROOT : Chemin absolu vers le répertoire où les fichiers médias téléchargés seront stockés.
# C'est le répertoire que votre serveur web (Nginx/Apache) servira en production sous l'URL MEDIA_URL.
MEDIA_ROOT = BASE_DIR / "mediafiles" # Créez ce répertoire à la racine du projet


# --- Configuration de l'Authentification ---

# Dites à Django d'utiliser votre modèle User personnalisé
AUTH_USER_MODEL = 'internships.User'

# URLs de redirection pour l'authentification
LOGIN_URL = '/comptes/connexion/' # L'URL de votre page de connexion
LOGIN_REDIRECT_URL = '/facultaire/tableau-de-bord/' # URL où rediriger après une connexion réussie (adapter au rôle)
# Vous devrez gérer la redirection post-connexion en fonction du rôle de l'utilisateur dans la vue de tableau de bord
# ou une vue intermédiaire si LOGIN_REDIRECT_URL est le même pour tous.
LOGOUT_REDIRECT_URL = '/comptes/connexion/' # URL où rediriger après une déconnexion réussie

# Backend d'authentification par défaut (utilisé avec votre modèle User)
# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.ModelBackend', # Le backend par défaut
# ]


# --- Configuration de Crispy Forms ---

# Spécifiez le template pack pour crispy forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5" # Ou "tailwind" si vous utilisez Tailwind CSS
CRISPY_TEMPLATE_PACK = "bootstrap5"


# --- Configuration de Messages ---
# Le framework de messages pour afficher des notifications (messages.success, messages.error, etc.)
# Peuvent être personnalisés si besoin.
# MESSAGE_STORAGE = 'django.contrib.messages.storage.sessions.SessionStorage'


# --- Configuration des Emails ---
# Nécessaire pour la réinitialisation de mot de passe, confirmation email, etc.

# En développement, utilisez le backend console pour voir les emails dans la console
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# En production, configurez un vrai serveur SMTP
# Assurez-vous d'utiliser des variables d'environnement pour les identifiants
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = os.getenv("EMAIL_HOST")
# EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587)) # Port SMTP (ex: 587 pour TLS, 465 pour SSL)
# EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True").lower() == "true" # Utiliser TLS ?
# EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "False").lower() == "true" # Utiliser SSL ?
# EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER") # Votre nom d'utilisateur SMTP
# EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD") # Votre mot de passe SMTP
# DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "webmaster@votreapp.com") # Adresse email par défaut pour l'envoi


# --- Paramètres d'Administration ---
# ADMIN_URL = "admin/" # L'URL par défaut de l'administration (bon pour la sécurité de la changer en prod)

# --- Default primary key field type ---
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# --- Autres Paramètres ---
# Ajoutez d'autres paramètres globaux ici si nécessaire
# Par exemple, des constantes comme le nombre maximum de propositions, la note maximale, etc.
# MAX_PROPOSALS = 2
# MAX_GRADE = 100